CREATE DATABASE TG05;

USE TG05;

CREATE TABLE TB_VENDAS
(
    CD_VENDA   INT            NOT NULL IDENTITY (1,1) PRIMARY KEY,
    DT_VENDA   DATETIME       NOT NULL,
    CD_PRODUTO INT            NOT NULL,
    QUANTIDADE INT            NOT NULL,
    VALOR      NUMERIC(10, 2) NOT NULL
)


/* Tabela para log de altera��es na tabela de Vendas. As altera��es podem
   ser de tr�s tipos: (I - Inclusao, A - Alteracao, R - Remocao). O Log
   sempre armazena os valores antigos e os novos valores. Somente os 
   os atributos QUANTIDADE e VALOR podem ser alterados para uma venda. */

CREATE TABLE TB_LOG_VENDAS
(
    CD_LOG            INT IDENTITY (1,1) NOT NULL,
    DT_LOG            DATETIME           NOT NULL, -- Data em que o log foi registrado
    TIPO_OPERACAO     CHAR(1) CHECK (TIPO_OPERACAO IN ('I', 'A', 'R')),
    CD_VENDA          INT                NULL,
    CD_PRODUTO        INT                NULL,
    DT_VENDA          DATETIME           NULL,
    QUANTIDADE_ANTIGA INT                NULL,
    VALOR_ANTIGO      NUMERIC(10, 2)     NULL,
    QUANTIDADE_NOVA   INT                NULL,
    VALOR_NOVO        NUMERIC(10, 2)     NULL
)

CREATE OR ALTER TRIGGER TG_INSERCOES_VENDAS
ON TB_VENDAS
AFTER INSERT
AS
BEGIN
    DECLARE @CD_VENDA   INT;
    DECLARE @DT_VENDA   DATETIME;
    DECLARE @CD_PRODUTO INT;
    DECLARE @QUANTIDADE INT;
    DECLARE @VALOR      NUMERIC(10,2);

    DECLARE C_VENDAS CURSOR FOR
        SELECT *
        FROM INSERTED;

    OPEN C_VENDAS;

    FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR

    WHILE (@@FETCH_STATUS = 0)
    BEGIN
        INSERT INTO TB_LOG_VENDAS(DT_LOG,TIPO_OPERACAO,CD_VENDA,CD_PRODUTO,DT_VENDA,QUANTIDADE_ANTIGA,VALOR_ANTIGO,QUANTIDADE_NOVA,VALOR_NOVO)
        VALUES(GETDATE(),'I',@CD_VENDA,@CD_PRODUTO,@DT_VENDA,NULL,NULL,@QUANTIDADE,@VALOR)

        FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR
    END

    CLOSE C_VENDAS;
    DEALLOCATE C_VENDAS;
end

INSERT INTO TB_VENDAS
VALUES('09-11-2022',1,5,2.50)

SELECT * FROM TB_LOG_VENDAS

CREATE OR ALTER TRIGGER TG_ATUALIZACAO_VENDAS
ON TB_VENDAS
AFTER UPDATE
AS
BEGIN
    DECLARE @CD_VENDA   INT;
    DECLARE @DT_VENDA   DATETIME;
    DECLARE @CD_PRODUTO INT;
    DECLARE @QUANTIDADE INT;
    DECLARE @VALOR      NUMERIC(10,2);
    DECLARE @QUANTIDADE_ANTIGO INT;
    DECLARE @VALOR_ANTIGO      NUMERIC(10,2);

    DECLARE C_VENDAS CURSOR FOR
        SELECT inserted.cd_venda, inserted.dt_venda, inserted.cd_produto, inserted.quantidade, inserted.valor
        FROM INSERTED;

    OPEN C_VENDAS;

    FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR

    WHILE (@@FETCH_STATUS = 0)
    BEGIN
        SELECT @QUANTIDADE_ANTIGO = ISNULL(QUANTIDADE, 0)
        FROM DELETED
        WHERE CD_VENDA = @CD_VENDA;

        SELECT @VALOR_ANTIGO = ISNULL(VALOR, 0)
        FROM DELETED
        WHERE CD_VENDA = @CD_VENDA;

        INSERT INTO TB_LOG_VENDAS(DT_LOG,TIPO_OPERACAO,CD_VENDA,CD_PRODUTO,DT_VENDA,QUANTIDADE_ANTIGA,VALOR_ANTIGO,QUANTIDADE_NOVA,VALOR_NOVO)
        VALUES(GETDATE(),'A',@CD_VENDA,@CD_PRODUTO,@DT_VENDA,@QUANTIDADE_ANTIGO,
               @VALOR_ANTIGO,@QUANTIDADE,@VALOR)

        FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR
    END

    CLOSE C_VENDAS;
    DEALLOCATE C_VENDAS;
end

UPDATE TB_LOG_VENDAS
SET TIPO_OPERACAO = 'A'
WHERE CD_LOG = 2

CREATE OR ALTER TRIGGER TG_DELETAR_VENDAS
ON TB_VENDAS
AFTER DELETE
AS
BEGIN
    DECLARE @CD_VENDA   INT;
    DECLARE @DT_VENDA   DATETIME;
    DECLARE @CD_PRODUTO INT;
    DECLARE @QUANTIDADE INT;
    DECLARE @VALOR      NUMERIC(10,2);
    DECLARE @QUANTIDADE_ANTIGO INT;
    DECLARE @VALOR_ANTIGO      NUMERIC(10,2);

    DECLARE C_FUNCIONARIO CURSOR FOR
        SELECT *
        FROM DELETED;

    OPEN C_VENDAS;

    FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR

    WHILE (@@FETCH_STATUS = 0)
    BEGIN
        INSERT INTO TB_LOG_VENDAS(DT_LOG,TIPO_OPERACAO,CD_VENDA,CD_PRODUTO,DT_VENDA,QUANTIDADE_ANTIGA,VALOR_ANTIGO,QUANTIDADE_NOVA,VALOR_NOVO)
        VALUES(GETDATE(),'R',@CD_VENDA,@CD_PRODUTO,@DT_VENDA,@QUANTIDADE,
               @VALOR,NULL,NULL)

        FETCH NEXT FROM C_VENDAS INTO @CD_VENDA,@DT_VENDA,@CD_PRODUTO,@QUANTIDADE,@VALOR
    END

    CLOSE C_VENDAS;
    DEALLOCATE C_VENDAS;
end

DELETE FROM TB_VENDAS
WHERE CD_VENDA = 1