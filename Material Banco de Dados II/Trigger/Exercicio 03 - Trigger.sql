CREATE DATABASE TG03;

USE TG03;

CREATE TABLE TB_FUNCIONARIO (
    MATRICULA INT NOT NULL PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL,
    SALARIO NUMERIC (10,2),
    GRATIFICACAO NUMERIC(10,2)
)

CREATE TABLE LOG_TB_FUNCIONARIO (
    MATRICULA INT NOT NULL,
    NOME VARCHAR(30) NOT NULL,
    DATA DATE DEFAULT GETDATE(),
    SALARIO_INTEGRAL_ANTIGO NUMERIC (10,2),
    SALARIO_INTEGRAL_NOVO_ NUMERIC(10,2)
)


CREATE OR ALTER TRIGGER TG_INSERT_ATUALIZARSALARIO
ON TB_FUNCIONARIO
AFTER UPDATE
AS
BEGIN
    DECLARE @GRATIFICACAO NUMERIC(10,2);
    DECLARE @NOME VARCHAR(30);
    DECLARE @MATRICULA INT;
    DECLARE @SALARIO NUMERIC(10,2);
    DECLARE @TOTAL_VELHO NUMERIC(10,2);

    -- Cursor para iterar sobre os registros inseridos
    DECLARE C_FUNCIONARIO CURSOR FOR
        SELECT ISNULL(GRATIFICACAO, 0), NOME, MATRICULA, ISNULL(SALARIO, 0)
        FROM INSERTED;

    OPEN C_FUNCIONARIO;

    FETCH NEXT FROM C_FUNCIONARIO INTO @GRATIFICACAO, @NOME, @MATRICULA, @SALARIO;

    WHILE (@@FETCH_STATUS = 0)
    BEGIN
        -- Calcula o total velho para o registro atualizado
    SELECT @TOTAL_VELHO = SUM(ISNULL(SALARIO, 0) + ISNULL(GRATIFICACAO, 0))
    FROM DELETED
    WHERE MATRICULA = @MATRICULA;


        -- Compara e insere no log se o total novo for maior
        IF @SALARIO + @GRATIFICACAO > @TOTAL_VELHO
        BEGIN
            INSERT INTO LOG_TB_FUNCIONARIO
            (MATRICULA, NOME, SALARIO_INTEGRAL_ANTIGO, SALARIO_INTEGRAL_NOVO_)
            VALUES (@MATRICULA, @NOME, @TOTAL_VELHO, @SALARIO + @GRATIFICACAO);
        END

        FETCH NEXT FROM C_FUNCIONARIO INTO @GRATIFICACAO, @NOME, @MATRICULA, @SALARIO;
    END

    CLOSE C_FUNCIONARIO;
    DEALLOCATE C_FUNCIONARIO;
END;


INSERT INTO TB_FUNCIONARIO
VALUES (1,'CHIQUINHO',200,100)

INSERT INTO TB_FUNCIONARIO
VALUES   (2,'NEM',300,NULL)

SELECT * FROM LOG_TB_FUNCIONARIO

SELECT * FROM TB_FUNCIONARIO

UPDATE TB_FUNCIONARIO
SET SALARIO= 700,GRATIFICACAO = 200
WHERE MATRICULA = 2

DELETE FROM TB_FUNCIONARIO WHERE MATRICULA= 2;